// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract EnergyMarket {
    // Struct to store offer metadata (optional)
    struct Trade {
        string ipfsHash;
        uint256 timestamp;
    }

    // Mapping of user to their trade IPFS hashes
    mapping(address => Trade[]) private trades;

    // Record a trade by IPFS hash
    function recordTrade(string memory ipfsHash) public {
        trades[msg.sender].push(Trade(ipfsHash, block.timestamp));
    }

    // Get all trade IPFS hashes for a user
    function getTradeHashes(address user) public view returns (string[] memory) {
        uint count = trades[user].length;
        string[] memory hashes = new string[](count);

        for (uint i = 0; i < count; i++) {
            hashes[i] = trades[user][i].ipfsHash;
        }

        return hashes;
    }

    // Optionally add helper to get full trade with timestamp
    function getTradeWithTimestamp(address user, uint index) public view returns (string memory, uint256) {
        Trade memory trade = trades[user][index];
        return (trade.ipfsHash, trade.timestamp);
    }
}
